In Python, there are several built-in functions and methods that start and end with double underscores (`__`). These are often referred to as "dunder" methods or special methods, and they are used to define or customize the behavior of objects in Python. Here are some of the commonly used ones:

1. `__init__`: Initializes a newly created object.
2. `__del__`: Called when an object is about to be destroyed.
3. `__repr__`: Provides a string representation of the object that is intended to be unambiguous and useful for debugging.
4. `__str__`: Provides a string representation of the object that is readable and used for display.
5. `__len__`: Returns the length of the object.
6. `__getitem__`: Retrieves an item from the object using indexing.
7. `__setitem__`: Sets an item in the object using indexing.
8. `__delitem__`: Deletes an item from the object using indexing.
9. `__iter__`: Returns an iterator object.
10. `__next__`: Returns the next item from the iterator.
11. `__contains__`: Checks if an item is in the object.
12. `__eq__`: Checks if two objects are equal.
13. `__ne__`: Checks if two objects are not equal.
14. `__lt__`: Checks if one object is less than another.
15. `__le__`: Checks if one object is less than or equal to another.
16. `__gt__`: Checks if one object is greater than another.
17. `__ge__`: Checks if one object is greater than or equal to another.
18. `__call__`: Allows an instance of a class to be called as if it were a function.
19. `__contains__`: Checks if a container contains a value.
20. `__enter__` and `__exit__`: Used for context management in `with` statements.

These methods are part of Python's data model and are used to define how objects of a class should behave in various situations.



Sure! Here are some examples that illustrate how you might use special (dunder) methods in Python:

### 1. `__init__`
The `__init__` method is a constructor used to initialize a new object.

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

p = Person('Alice', 30)
print(p.name)  # Output: Alice
print(p.age)   # Output: 30
```

### 2. `__del__`
The `__del__` method is called when an object is about to be destroyed.

```python
class Person:
    def __del__(self):
        print(f'{self.name} is being deleted')

p = Person()
del p  # Output: <Person object> is being deleted
```

### 3. `__repr__`
The `__repr__` method provides a string representation of the object for debugging.

```python
class Person:
    def __repr__(self):
        return f'Person(name={self.name}, age={self.age})'

p = Person('Alice', 30)
print(repr(p))  # Output: Person(name=Alice, age=30)
```

### 4. `__str__`
The `__str__` method provides a user-friendly string representation of the object.

```python
class Person:
    def __str__(self):
        return f'{self.name}, {self.age} years old'

p = Person('Alice', 30)
print(str(p))  # Output: Alice, 30 years old
```

### 5. `__len__`
The `__len__` method defines behavior for the `len()` function.

```python
class MyList:
    def __init__(self, *args):
        self.items = list(args)
        
    def __len__(self):
        return len(self.items)

ml = MyList(1, 2, 3, 4)
print(len(ml))  # Output: 4
```

### 6. `__getitem__`, `__setitem__`, `__delitem__`
These methods handle item access, assignment, and deletion respectively.

```python
class MyDict:
    def __init__(self):
        self.data = {}
        
    def __getitem__(self, key):
        return self.data[key]
    
    def __setitem__(self, key, value):
        self.data[key] = value
    
    def __delitem__(self, key):
        del self.data[key]

d = MyDict()
d['a'] = 10
print(d['a'])  # Output: 10
del d['a']
```

### 7. `__iter__` and `__next__`
These methods are used to make an object iterable.

```python
class Counter:
    def __init__(self, low, high):
        self.current = low
        self.high = high
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.current > self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.current - 1

for num in Counter(1, 3):
    print(num)  # Output: 1, 2, 3
```

### 8. `__call__`
The `__call__` method allows an instance of a class to be called as if it were a function.

```python
class Adder:
    def __init__(self, start):
        self.start = start
    
    def __call__(self, x):
        return self.start + x

add_five = Adder(5)
print(add_five(10))  # Output: 15
```

### 9. `__contains__`
The `__contains__` method is used by the `in` operator.

```python
class MySet:
    def __init__(self, *args):
        self.items = set(args)
    
    def __contains__(self, item):
        return item in self.items

s = MySet(1, 2, 3)
print(2 in s)  # Output: True
print(5 in s)  # Output: False
```

### 10. `__eq__`, `__ne__`, `__lt__`, `__le__`, `__gt__`, `__ge__`
These methods define behavior for comparison operators.

```python
class Number:
    def __init__(self, value):
        self.value = value
    
    def __eq__(self, other):
        return self.value == other.value
    
    def __lt__(self, other):
        return self.value < other.value

a = Number(5)
b = Number(10)

print(a == b)  # Output: False
print(a < b)   # Output: True
```

### 11. `__enter__` and `__exit__`
These methods are used for context management with the `with` statement.

```python
class MyContextManager:
    def __enter__(self):
        print('Entering context')
        return self
    
    def __exit__(self, exc_type, exc_value, traceback):
        print('Exiting context')

with MyContextManager() as cm:
    print('Inside context')
```

This will output:
```
Entering context
Inside context
Exiting context
```

These examples cover a range of special methods that can be used to define or customize the behavior of objects in Python.